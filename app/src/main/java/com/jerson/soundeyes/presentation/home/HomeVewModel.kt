package com.jerson.soundeyes.presentation.homeimport android.util.Logimport androidx.compose.runtime.Stateimport androidx.compose.runtime.mutableStateOfimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.jerson.soundeyes.consts.Constimport com.jerson.soundeyes.domain.use_case.BluetoothUseCaseimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.MutableSharedFlowimport kotlinx.coroutines.flow.SharedFlowimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass HomeVewModel @Inject constructor(    private val bluetoothUseCase: BluetoothUseCase) : ViewModel() {    private var _state = mutableStateOf(HomeState())    val state: State<HomeState> = _state    private val _navigationEvent = MutableSharedFlow<NavigationEvent>()    val navigationEvent: SharedFlow<NavigationEvent> = _navigationEvent    fun onEvent(event: HomeEvent) {        when (event) {            is HomeEvent.ActivateDialogError -> {                _state.value = _state.value.copy(                    errorDialog = true,                    isLoading = false                )            }            is HomeEvent.OnDismissDialogError ->  {                _state.value = _state.value.copy(                    errorDialog = false                )            }            is HomeEvent.ActivateBluetoothError -> {                _state.value = _state.value.copy(                    errorBluetooth = true,                    isLoading = false                )            }            is HomeEvent.OnDismissBluetoothError ->  {                _state.value = _state.value.copy(                    errorBluetooth = false                )            }            is HomeEvent.OnSelectedCamera -> {                val selectedCamera = event.string                _state.value = _state.value.copy(                    selectCamera = selectedCamera                )            }            is HomeEvent.OnSelectedResolution -> {                val selectedResolution = event.string                _state.value = _state.value.copy(                    selectResolution = selectedResolution                )            }            is HomeEvent.SendConfig -> {                _state.value = _state.value.copy(                    isLoading = true                )                viewModelScope.launch {                    if(bluetoothUseCase.isBluetoothEnable()){                        Log.d("Bluetooth","${state.value.selectResolution} ${state.value.selectCamera}" )                        bluetoothUseCase.sendConfigCameraUseCase(valueConfig()) { success ->                            _state.value = _state.value.copy(isLoading = false)                            Log.d("sucess", "$success")                            launch {                                if (success) {                                    _navigationEvent.emit(NavigationEvent.NavigateToBluetoothScreen)                                } else {                                    _navigationEvent.emit(NavigationEvent.ShowErrorDialog)                                }                            }                        }                    }else{                        _state.value = _state.value.copy(                            errorBluetooth = true,                            isLoading = false)                    }                }            }        }    }    private fun valueConfig(): Int {        val selectResolution: String = _state.value.selectResolution        return if (Const.DESEMPENHO == selectResolution) 2 else 3 //mudar talvez    }}